<VirtualHost *:{{ item.https_port }}>

# Include <REDIRECTOR_DOMAIN>. This is the frontend domain the C2 Implant will send traffic to and points to the Redirector IP.
ServerName {{ item.redirector_domain }}
DocumentRoot /var/www/html/{{ item.redirector_domain }}

# https://httpd.apache.org/docs/2.4/mod/core.html#loglevel
# LogLevel alert rewrite:trace6

# Allow Directory Listing

# <Directory /var/www/html>
#        Options Indexes FollowSymLinks
#        AllowOverride All
#        Require all granted
# </Directory>

# Enable SSL engine for secure connections
SSLEngine On
# Set the path to the SSL certificate file
SSLCertificateFile /etc/letsencrypt/live/{{ item.redirector_domain }}/cert.pem
# Set the path to the SSL certificate key file
SSLCertificateKeyFile /etc/letsencrypt/live/{{ item.redirector_domain }}/privkey.pem
# Set the path to the SSL certificate chain file
SSLCertificateChainFile /etc/letsencrypt/live/{{ item.redirector_domain }}/fullchain.pem
# Enable SSL proxy engine for secure proxy connections
SSLProxyEngine On
# Disable verification of the SSL certificate on the proxy
SSLProxyVerify none
# Disable checking of the Common Name (CN) field in the peer certificate on the proxy
SSLProxyCheckPeerCN off
# Disable checking of the peer certificate's name on the proxy
SSLProxyCheckPeerName off
# Disable checking of the expiration date of the peer certificate on the proxy
SSLProxyCheckPeerExpire off
# Reverse Proxy (Redirector) preserves the original "Host" header from the client's request and sends it to the backend server
ProxyPreserveHost On
# Enable or disable the Apache URL rewriting engine
RewriteEngine On

# Ensure "snakeoil" certs/key are commented in Apache Server configuration. Otherwise, the server will use self-signed certificate.

# SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem
# SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key

# Define Redirect Target
DEFINE REDIR_TARGET {{ item.decoy_domain }}

# Define Backend C2 Teamserver(s)
{% if item.backend_teamservers is defined %}
{% for backend_teamserver in item.backend_teamservers %}
DEFINE {{ backend_teamserver.name }} {{ backend_teamserver.vpn_ip }}
{% endfor %}
{% endif %}

# https://httpd.apache.org/docs/2.4/mod/mod_rewrite.html
# RewriteRule: If the request contains "/<URI_PATH_C2_TRAFFIC>/", redirect to C2 VPN IPs. If it does not contain the "/<URI_PATH_C2_TRAFFIC>/", traffic will match the RewriteRule for <DECOY_DOMAIN>.<TLD>.
Include /etc/apache2/redirect.rules

# Specify User Agents to be blocked
RewriteCond %{HTTP_USER_AGENT} (google|yandex|bingbot|Googlebot|bot|spider|simple|BBBike|wget|cloudfront|curl|Python|Wget|crawl|baidu|Lynx|xforce|HTTrack|Slackbot|netcraft|NetcraftSurveyAgent|Netcraft|shodan) [NC]
RewriteRule ^(.*)$ %{REQUEST_SCHEME}://${REDIR_TARGET} [L,R=301]

{% if item.pre_configs is defined %}
{% for config in item.pre_configs %}
{{ config}}
{% endfor %}
{% endif %}

{% if item.config_files is defined %}
{% for config_file in item.config_files %}
{{ lookup('file', config_file) }} 
{% endfor %}
{% endif %}

# Required HTTP Header(s)
{% if item.required_http_header is defined %}
{% for header in item.required_http_header %}
RewriteCond %{HTTP:{{ header }}} ^$
RewriteRule ^(.*)$ %{REQUEST_SCHEME}://${REDIR_TARGET} [L,R=301]
{% endfor %}
{% endif %}

{% if item.uri_path_definitions is defined %}
{% for uri in item.uri_path_definitions %}
Define {{ uri.name }} {{ uri.path }}
{% endfor %}
{% endif %}

# https://httpd.apache.org/docs/2.4/mod/mod_rewrite.html#rewritecond
{% if item.rewrite_rule_filters is defined %}
{% for c in item.rewrite_rule_filters %}
RewriteCond %{REQUEST_URI} {{ c.rewritefilter }}
RewriteRule ^(.*)$ %{REQUEST_SCHEME}://{{ c.backend_teamserver }}:{{ c.backend_forward_port }}%{REQUEST_URI} [P,NE,L]
ProxyPassReverse ^ %{REQUEST_SCHEME}://{{ c.backend_teamserver }}:{{ c.backend_forward_port }}%{REQUEST_URI} [P,NE]

{% endfor %}
{% endif %}

# If the above rules don't match send to <DECOY_DOMAIN>.<TLD> (e.g. google.com)
RewriteRule ^(.*)$ %{REQUEST_SCHEME}://${REDIR_TARGET} [L,R=301]

# Custom logging location
ErrorLog /var/www/html/{{ item.redirector_domain }}/logs/error.log
CustomLog /var/www/html/{{ item.redirector_domain }}/logs/access.log combined

# Define directory to hold logs and deny access to it
<Directory /var/www/html/{{ item.redirector_domain }}/logs>
        Order deny,allow
        Deny from all
</Directory>

# Security Headers

<IfModule mod_headers.c>
    Header set Cache-Control "no-store, no-cache, proxy-revalidate"
    Header set Pragma "no-cache"
    Header set Expires "0"
    Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    Header always set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; object-src 'none'; frame-ancestors 'self'; base-uri 'self'; form-action 'self'"
    Header always set X-XSS-Protection "1; mode=block"
    Header always set X-Frame-Options "SAMEORIGIN"
    Header always set X-Content-Type-Options "nosniff"
    Header always set Referrer-Policy "strict-origin"
    Header set Content-Type "text/html; charset=utf-8"
</IfModule>

</Virtualhost>