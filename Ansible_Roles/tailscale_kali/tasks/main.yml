---
# archivo de tareas para tailscale

# Validar si Tailscale ya está instalado con `tailscale -v`
- name: Validar que tailscale está instalado
  ansible.builtin.command: tailscale version  # Ejecuta el comando para obtener la versión de Tailscale
  register: tailscale_exists  # Registra el resultado del comando
  failed_when: tailscale_exists.rc|int != 0  # Falla si el código de retorno no es 0
  changed_when: tailscale_exists.rc != 0  # Usa el código de retorno para definir cuándo la tarea ha cambiado
  ignore_errors: true  # Ignora errores para continuar con la ejecución

# Si Tailscale no está instalado, agrega la clave de firma del paquete Tailscale usando `apt`
- name: Agregar la clave de firma del paquete Tailscale si Tailscale no está instalado
  become: true  # Ejecuta la tarea con privilegios de superusuario
  ansible.builtin.get_url:
    url: https://pkgs.tailscale.com/stable/ubuntu/focal.noarmor.gpg  # URL de la clave de firma del paquete Tailscale
    dest: /usr/share/keyrings/tailscale-archive-keyring.gpg  # Ruta de destino de la clave de firma
    mode: '0644'  # Establece permisos de lectura y escritura para el propietario, y solo lectura para el grupo y otros
  when: tailscale_exists is failed  # Solo ejecuta esta tarea si Tailscale no está instalado
  register: signing_key_installed  # Registra el resultado de la instalación de la clave de firma
  failed_when: signing_key_installed is failed  # Falla si la instalación de la clave de firma falla
  changed_when: signing_key_installed is changed  # Marca la tarea como cambiada si la clave de firma se instala
  tags:
    - tailscale  # Etiqueta para identificar esta tarea

# Agrega el repositorio de Tailscale si Tailscale no está instalado
- name: Agregar el repositorio de Tailscale si Tailscale no está instalado
  become: true  # Ejecuta la tarea con privilegios de superusuario
  ansible.builtin.get_url:
    url: https://pkgs.tailscale.com/stable/ubuntu/focal.tailscale-keyring.list  # URL del repositorio de Tailscale
    dest: /etc/apt/sources.list.d/tailscale.list  # Ruta de destino del archivo de lista del repositorio
    mode: '0644'  # Establece permisos de lectura y escritura para el propietario, y solo lectura para el grupo y otros
  when: tailscale_exists is failed  # Solo ejecuta esta tarea si Tailscale no está instalado
  register: repo_installed  # Registra el resultado de la instalación del repositorio
  failed_when: repo_installed is failed  # Falla si la instalación del repositorio falla
  changed_when: repo_installed is changed  # Marca la tarea como cambiada si el repositorio se instala
  tags:
    - tailscale  # Etiqueta para identificar esta tarea

# Elimina los paquetes pre-requisitos antes de una nueva instalación
- name: Eliminar los paquetes pre-requisitos antes de una nueva instalación
  become: true  # Ejecuta la tarea con privilegios de superusuario
  ansible.builtin.apt:
    update_cache: true  # Actualiza la caché de paquetes antes de la eliminación
    pkg: "{{ item }}"  # Nombre del paquete a eliminar
  loop:
    - tailscale  # Paquete Tailscale a eliminar
  register: tailscale_package_removed  # Registra el resultado de la eliminación del paquete
  failed_when: tailscale_package_removed is failed  # Falla si la eliminación del paquete falla
  changed_when: tailscale_package_removed is changed  # Marca la tarea como cambiada si el paquete se elimina
  ignore_errors: true  # Ignora errores para continuar con la ejecución

# Valida que el paquete fue desinstalado correctamente
- name: Validar que el paquete fue desinstalado correctamente
  become: true  # Ejecuta la tarea con privilegios de superusuario
  ansible.builtin.apt:
    name: "{{ item }}"  # Nombre del paquete a validar
    state: absent  # Asegura que el paquete esté ausente
  register: tailscale_is_not_installed  # Registra el resultado de la validación de la desinstalación
  loop:
    - tailscale  # Paquete Tailscale a validar
  ignore_errors: true  # Ignora errores para continuar con la ejecución

# Deshabilita el inicio automático y detiene cualquier demonio/servicio de Tailscale en ejecución usando `systemctl`/`systemd`
- name: Deshabilitar y detener el demonio/servicio de tailscale
  when: tailscale_exists is failed  # Solo ejecuta esta tarea si Tailscale no está instalado
  ansible.builtin.systemd:
    name: tailscaled  # Nombre del servicio de Tailscale
    enabled: false  # Deshabilita el inicio automático del servicio
    state: stopped  # Detiene el servicio

# Instala Tailscale usando `apt`
- name: Instalar Tailscale usando apt
  become: true  # Ejecuta la tarea con privilegios de superusuario
  ansible.builtin.apt:
    update_cache: true  # Actualiza la caché de paquetes antes de la instalación
    pkg: "{{ item }}"  # Nombre del paquete a instalar
  loop:
    - tailscale  # Paquete Tailscale a instalar

# Valida que el paquete fue instalado correctamente
- name: Validar que el paquete fue instalado correctamente
  ansible.builtin.apt:
    name: "{{ item }}"  # Nombre del paquete a validar
    state: present  # Asegura que el paquete esté instalado
  register: tailscale_installed  # Registra el resultado de la validación de la instalación
  loop:
    - tailscale  # Paquete Tailscale a validar

# Habilita el inicio automático del demonio/servicio de Tailscale usando `systemctl`/`systemd`
- name: Habilitar el demonio/servicio de tailscale
  become: true  # Ejecuta la tarea con privilegios de superusuario
  ansible.builtin.systemd:
    name: tailscaled  # Nombre del servicio de Tailscale
    enabled: true  # Habilita el inicio automático del servicio
    state: started  # Inicia el servicio

# Valida la clave de autenticación de Tailscale comprobando que `tailscale_authkey`
# está definido y tiene una longitud de caracteres de "30" y guarda el resultado
# de la validación en `authorization` usando `register`
- name: Validar la clave de autenticación de Tailscale
  ansible.builtin.assert:
    that:
      - tailscale_authkey is defined  # Verifica que la clave de autenticación de Tailscale esté definida
      - "{{ tailscale_authkey | length }} >= 30"  # Verifica que la longitud de la clave de autenticación sea de al menos 30 caracteres
    quiet: false  # Muestra mensajes de éxito y error
    success_msg: 'TAILSCALE_AUTHKEY es válido'  # Mensaje de éxito si la clave de autenticación es válida
  register: authorization  # Registra el resultado de la validación
  ignore_errors: true  # Ignora errores para continuar con la ejecución

# Valida si la red de Tailscale está activa con `tailscale status` y guarda el resultado en `status` usando `register`
- name: Verificar si tailscale está activo
  ansible.builtin.command: tailscale status  # Ejecuta el comando para obtener el estado de Tailscale
  register: status  # Registra el resultado del comando
  failed_when: status.rc|int > 1  # Falla si el código de retorno es mayor que 1
  changed_when: false  # No marca la tarea como cambiada

# Conecta la máquina en la que se está ejecutando el rol a la VPN de Tailscale `tailnet` usando `tailscale up -authkey {{ tailscale_authkey }}`
- name: Conectar la máquina a tailscale
  ansible.builtin.command: "sudo tailscale up -authkey {{ tailscale_authkey }}"  # Comando para conectar la máquina a la VPN de Tailscale
  no_log: true  # Protege la clave de autenticación para la VPN
  when:
    - status.rc|int != 0  # Solo ejecuta esta tarea si el estado de Tailscale no es 0
    - not authorization.failed  # Solo ejecuta esta tarea si la validación de la clave de autenticación no falló
  become: true  # Ejecuta la tarea con privilegios de superusuario
  register: tailscale_node  # Registra el resultado de la conexión a la VPN
  changed_when: tailscale_node.rc|int == 0  # Marca la tarea como cambiada si el código de retorno es 0

# Verifica la dirección IPv4 de la red de Tailscale con `tailscale ip` y la guarda en `ip_check` usando `register`
- name: Verificar la dirección IP
  ansible.builtin.command: tailscale ip  # Ejecuta el comando para obtener la dirección IP de Tailscale
  register: ip_check  # Registra el resultado del comando
  failed_when: false  # No falla la tarea
  changed_when: false  # No marca la tarea como cambiada

# Guarda la dirección IPv4 de la red de Tailscale en `tailscale_ip` usando `set_fact` y muestra el valor de `ip_check` guardado en el paso anterior
- name: Establecer el hecho tailscale_ip
  when: ip_check.rc|int == 0  # Solo ejecuta esta tarea si el código de retorno es 0
  ansible.builtin.set_fact:
    tailscale_ip: "{{ ip_check.stdout_lines[0] }}"  # Guarda la dirección IP de Tailscale

# Verifica el estado de tailscaled y sus conexiones y lo guarda en `status_check`
- name: Verificar el estado
  ansible.builtin.command: tailscale status  # Ejecuta el comando para obtener el estado de Tailscale
  changed_when: false  # No marca la tarea como cambiada
  failed_when: status.rc|int > 1  # Falla si el código de retorno es mayor que 1
  register: status_check  # Registra el resultado del comando

# Muestra el valor de `status_check` en la consola
- name: Mostrar la IP de tailscale de esta máquina
  ansible.builtin.debug:
    msg: "{{ status_check.stdout_lines }}"  # Muestra el resultado del comando
