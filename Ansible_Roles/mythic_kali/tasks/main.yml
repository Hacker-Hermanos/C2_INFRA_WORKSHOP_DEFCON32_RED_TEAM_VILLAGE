---
# SECTION 1: Docker Compose Installation and Configuration
# Initial installation of Docker Compose and configuration of its basic components
# Commented out this section on November 12th, 2024 and handled docker pre-requisites in the role using Mythic's provided install_docker_<distro>.sh script

#- name: Install Docker Compose standalone
#  ansible.builtin.get_url:
#    url: https://github.com/docker/compose/releases/download/v2.29.1/docker-compose-linux-x86_64
#    dest: /usr/local/bin/docker-compose
#    mode: '0755'

#- name: Ensure docker-compose has executable permissions
#  ansible.builtin.file:
#    path: /usr/local/bin/docker-compose
#    mode: '0755'
#    state: file

#- name: Create a symbolic link for docker-compose in /usr/bin
#  ansible.builtin.file:
#    src: /usr/local/bin/docker-compose
#    dest: /usr/bin/docker-compose
#    state: link
#  become: true

#- name: Validate docker-compose installation
#  ansible.builtin.command:
#    cmd: docker-compose --version
#  register: result
#  failed_when: result.rc != 0
#  changed_when: false

# SECTION 2: Prerequisite Packages Installation
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true

- name: Upgrade all packages
  ansible.builtin.apt:
    upgrade: true

- name: Validate expect and prerequisite packages in a loop
  ansible.builtin.apt:
    pkg: "{{ item }}"
    state: present
  loop:
    - gpg
    - build-essential
    - mingw-w64
    - binutils-mingw-w64
    - g++-mingw-w64

# SECTION 3: Installation Directory Management
- name: Check if Mythic destination path exists
  ansible.builtin.stat:
    path: "{{ installation_path }}"
  register: installation_path_stat

- name: Delete Mythic destination path if it exists and is not a directory
  ansible.builtin.file:
    path: "{{ installation_path }}"
    state: absent
    force: true
  when: installation_path_stat.stat.exists and not installation_path_stat.stat.isdir

- name: Ensure Mythic destination path is empty if it exists
  ansible.builtin.shell: "rm -rf {{ installation_path }}/*"
  when: installation_path_stat.stat.exists and installation_path_stat.stat.isdir
  become: true
  ignore_errors: true

- name: Create Mythic destination path if it doesn't exist
  ansible.builtin.file:
    path: "{{ installation_path }}"
    state: directory
  when: not installation_path_stat.stat.exists
  become: true

# SECTION 4: Mythic Installation and Configuration
- name: Download Mythic
  ansible.builtin.git:
    repo: "{{ mythic_repo }}"
    dest: "{{ installation_path }}"
    version: "{{ mythic_version }}"
    force: true
  become: true

- name: Ensure install_docker_kali.sh has executable permissions
  ansible.builtin.file:
    path: /opt/TA0011_C2/Mythic/install_docker_kali.sh
    mode: '0755'
    state: file

- name: Run install_docker_kali.sh script
  ansible.builtin.command: sudo /opt/TA0011_C2/Mythic/install_docker_kali.sh
  register: install_docker_result
  failed_when: install_docker_result.rc != 0
  changed_when: false

- name: Check for mythic config
  ansible.builtin.stat:
    path: "{{ installation_path }}/.env"
  register: env_stat

- name: Change owner and group of /opt recursively to remote user
  ansible.builtin.file:
    path: /opt
    owner: "{{ ansible_user | default(lookup('env', 'USER')) }}"
    group: "{{ ansible_user | default(lookup('env', 'USER')) }}"
    recurse: true
  become: true

- name: Run 'make' in Mythic's main directory
  ansible.builtin.command: "make"
  args:
    chdir: "{{ installation_path }}"
  become: true
  register: make_result
  failed_when: make_result.rc != 0
  changed_when: false

- name: Change owner and group of /opt recursively to remote user
  ansible.builtin.file:
    path: /opt
    owner: "{{ ansible_user | default(lookup('env', 'USER')) }}"
    group: "{{ ansible_user | default(lookup('env', 'USER')) }}"
    recurse: true
  become: true

#- name: Ensure Docker service is started
#  ansible.builtin.service:
#    name: docker
#    state: started
#    enabled: true
#  become: true

- name: Check if Mythic container exists
  ansible.builtin.command: "docker ps -q -f name=mythic"
  register: mythic_result
  changed_when: false

## Ensure mythic_result has the expected structure
- name: Set fact for mythic_result existence
  ansible.builtin.set_fact:
    mythic_result_exists: "{{ mythic_result.stdout != '' }}"

- name: Install Agents
  ansible.builtin.include_tasks: install_agents.yml
  vars:
    agent: "{{ item }}"
    mythic_result_exists: "{{ mythic_result_exists }}"
  loop: "{{ agents }}"

# SECTION 5: Cleanup and Finalization
- name: Stop Mythic using ./mythic-cli
  ansible.builtin.command: "./mythic-cli stop"
  args:
    chdir: "{{ installation_path }}"
  become: true
  changed_when: false

- name: Stop Mythic docker-compose
  ansible.builtin.command: "docker compose down --remove-orphans"
  args:
    chdir: "{{ installation_path }}"
  become: true
  changed_when: false
