---
# Archivo de tareas para cobaltstrike
# Este playbook automatiza la instalación completa de Cobalt Strike

# Instalación de paquetes necesarios para la licencia interactiva de C2
- name: Instalar paquetes expect, java-common, y openjdk-11-jdk
  # Utilizamos el módulo apt para instalar paquetes en sistemas Debian/Ubuntu
  ansible.builtin.apt:
    # Actualizamos la caché de paquetes antes de instalar
    update_cache: true
    pkg: "{{ item }}"
  # Iteramos sobre una lista de paquetes necesarios
  loop:
    - expect    # Herramienta para automatizar interacciones interactivas
    - java-common    # Paquetes base de Java
    - openjdk-11-jdk    # Java Development Kit versión 11

# Validación de la instalación de paquetes
- name: Validar instalación de paquetes expect, java-common, y openjdk-11-jdk
  ansible.builtin.apt:
    pkg: "{{ item }}"
    # Aseguramos que tenemos la última versión de cada paquete
    state: latest
  loop:
    - expect
    - java-common
    - openjdk-11-jdk

# Eliminamos el directorio `/opt/TA0011_C2` si existe para evitar conflictos con instalaciones previas
- name: Eliminar directorio si existe para evitar conflictos con instalaciones previas
  ansible.builtin.file:
    path: '{{ c2_servers_dir }}/cobaltstrike'
    state: absent

# Eliminamos el archivo `/tmp/cobaltstrike-dist.tgz` previo si existe
- name: Eliminar archivo previo /tmp/cobaltstrike-dist.tgz para evitar problemas con instalaciones previas
  ansible.builtin.file:
    path: '/tmp/cobaltstrike-dist.tgz'
    state: absent

# Creamos la estructura de directorios necesaria para Cobalt Strike
- name: Crear directorios necesarios para Cobalt Strike
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
  # Creamos múltiples directorios en una sola tarea
  with_items:
    - '{{ c2_servers_dir }}'
    - '{{ c2_servers_dir }}/cobaltstrike/profiles'
    - '{{ c2_servers_dir }}/cobaltstrike/aggressor_scripts'

# Añadimos el perfil C2 maleable al directorio de Cobalt Strike
- name: Añadir archivo de perfil C2 maleable al directorio de Cobalt Strike
  template:
    src: "{{ cs_profile_location }}"
    dest: "{{ c2_servers_dir }}/cobaltstrike/profiles/{{ cs_profile }}.profile"
    # Establecemos permisos restrictivos por seguridad
    mode: 0600

# Configuramos Java 11 como la versión predeterminada
- name: Configurar Java 11 como la versión predeterminada
  ansible.builtin.command: update-java-alternatives -s java-1.11.0-openjdk-amd64
  # Ignoramos errores ya que pueden ocurrir si Java 11 ya está configurado
  ignore_errors: true
  become: true

# Obtenemos el token de descarga del sitio web de Cobalt Strike
- name: Obtener token de descarga del sitio web de Cobalt Strike usando la clave de licencia
  ansible.builtin.uri:
    url: https://download.cobaltstrike.com/download
    method: POST
    body: "dlkey={{ cs_key }}"
    return_content: true
    validate_certs: false
  register: cs_download_response

# Extraemos el token de descarga de la respuesta
- name: Extraer token de descarga de la respuesta
  ansible.builtin.set_fact:
    download_token: "{{ cs_download_response.content | regex_search('href=\"/downloads/(.*?)/', '\\1') }}"

# Descargamos el archivo de Cobalt Strike
- name: Descargar archivo de Cobalt Strike (.tgz) a /tmp/cobaltstrike-dist.tgz
  ansible.builtin.get_url:
    url: "https://download.cobaltstrike.com/downloads/{{ download_token[0] }}/latest410/cobaltstrike-dist-linux.tgz"
    dest: /tmp/cobaltstrike-dist.tgz
    mode: '0644'

# Extraemos el archivo de Cobalt Strike al directorio final
- name: Extraer archivo de Cobalt Strike (.tgz) al directorio definido en la variable c2_servers_dir
  ansible.builtin.unarchive:
    src: "/tmp/cobaltstrike-dist.tgz"
    dest: "{{ c2_servers_dir }}"
    remote_src: true
    extra_opts: "--gzip"

# Actualizamos y licenciamos Cobalt Strike usando expect
# Este es un proceso automatizado que simula la interacción manual con el instalador
- name: Actualizar y licenciar Cobalt Strike usando expect y pasando la clave de licencia
  ansible.builtin.shell: |
    # Script de expect para automatizar la entrada de la licencia
    log_file "expect.txt"
    set timeout 300
    spawn ./update
    expect {
      -re "Please enter your license key:" {
        send [format "%s\n" {{ cs_key }}]
      } default {
        exit 1
      }
    }
    expect {
      -re "(Failed to download hashes|Your license key is invalid)" {
        exit 1
      }
    }
    expect {
      -re "Done" {
        exit 0
      } default {
        exit 1
      }
    }
  become: true
  args:
    chdir: '{{ c2_servers_dir }}/cobaltstrike'
    creates: '{{ c2_servers_dir }}/cobaltstrike/cobaltstrike.auth'
    executable: /usr/bin/expect
  failed_when: expect.rc != 0
  register: expect
  vars:
    cobaltstrike_license: '{{ cs_key }}'

# Ajustamos los permisos finales del directorio
- name: Cambiar la propiedad del directorio '{{ c2_servers_dir }}'
  ansible.builtin.file:
    path: '{{ c2_servers_dir }}'
    owner: kali
    group: kali
    state: directory
    recurse: true
  become: true
